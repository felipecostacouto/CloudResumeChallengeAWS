name: Cloud Resume Challenge

on:
  push:
    branches:
      - main

permissions:
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pytest boto3 moto

      - name: Run Python Tests
        run: python -m pytest test_lambda/test_lambda.py

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Cypress Dependencies
        run: npm install

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      bucket_name: ${{ steps.tf.outputs.bucket_name }}
      cloudfront_distribution_id: ${{ steps.tf.outputs.cloudfront_distribution_id }}
      api_url: ${{ steps.tf.outputs.api_url }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        id: tf
        run: terraform apply -auto-approve

      - name: Set Outputs
        id: outputs
        run: |
          echo "bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_ENV
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_ENV

  invalidate-cloudfront-distribution:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy.outputs.cloudfront_distribution_id }} \
            --paths "/*" \
            --region us-east-1

  update-script:
    needs: invalidate-cloudfront-distribution
    runs-on: ubuntu-latest
    steps:
      - name: Update script.js with API URL
        run: |
          sed -i "s|PLACEHOLDER_URL|${{ needs.deploy.outputs.api_url }}|" frontEnd/script.js

      - name: Sync Updated Script
        run: |
          aws s3 sync frontEnd s3://${{ needs.deploy.outputs.bucket_name }} --delete --exclude '.git/*' --size-only --region us-east-1

  cypress-tests:
    needs: update-script
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Cypress Dependencies
        run: npm install

      - name: Run Cypress Tests
        run: npx cypress run --headless
        env:
          API_URL: ${{ needs.deploy.outputs.api_url }}

  cleanup:
    needs: 
      - deploy
      - invalidate-cloudfront-distribution
      - update-script
      - cypress-tests
    if: failure()  # Run only if any of the dependencies fail
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
